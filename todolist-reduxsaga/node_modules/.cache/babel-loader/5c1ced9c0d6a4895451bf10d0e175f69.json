{"ast":null,"code":"import { DEL_TODO_ITEM, CHANGE_TODO_ITEM, ADD_TODO_ITEM, REMOVE_FINISHED_TODO_ITEM, IS_CHECKED_ALL_TODO_ITEM, GET_ALL_ITEM } from './actionTypes'; // 默认的数据\n\nvar defaultState = {\n  todos: [// {\n    //     id: 1,\n    //     title: '看一小时React的课程',\n    //     finished: false\n    // },\n    // {\n    //     id: 2,\n    //     title: '打一小时篮球',\n    //     finished: false\n    // },\n    // {\n    //     id: 3,\n    //     title: '游泳一小时',\n    //     finished: false\n    // },\n    // {\n    //     id: 4,\n    //     title: '看书一小时',\n    //     finished: false\n    // },\n  ],\n  finishedCount: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(state, action); // 获取所有todos\n\n  if (action.type === GET_ALL_ITEM) {\n    var newState = JSON.parse(JSON.stringify(state));\n    newState.todos = action.todos;\n    return newState;\n  } // 1. 删除一条Todo\n\n\n  if (action.type === DEL_TODO_ITEM) {\n    var _newState = JSON.parse(JSON.stringify(state)); // 1.1 遍历\n\n\n    var finishedCount = 0;\n\n    _newState.todos.forEach(function (todo, index) {\n      if (todo.id === action.todoId) {\n        _newState.todos.splice(index, 1);\n      }\n    }); // 1.2 处理选中的\n\n\n    _newState.todos.forEach(function (todo, index) {\n      if (todo.finished) {\n        finishedCount += 1;\n      }\n    }); // 1.3 更新状态\n\n\n    _newState.finishedCount = finishedCount;\n    return _newState;\n  } // 2. 修改一条记录的状态\n\n\n  if (action.type === CHANGE_TODO_ITEM) {\n    // 1.1 遍历\n    var _newState2 = JSON.parse(JSON.stringify(state));\n\n    var _finishedCount = 0;\n\n    _newState2.todos.forEach(function (todo, index) {\n      if (todo.id === action.todoId) {\n        todo.finished = action.isFinished;\n      }\n\n      if (todo.finished) {\n        _finishedCount += 1;\n      }\n    }); // 2.3 返回新的数据状态\n\n\n    _newState2.finishedCount = _finishedCount;\n    return _newState2;\n  } // 3. 添加一条记录\n\n\n  if (action.type === ADD_TODO_ITEM) {\n    var _newState3 = JSON.parse(JSON.stringify(state));\n\n    _newState3.todos.push(action.todo);\n\n    return _newState3;\n  } // 4. 删除已经完成的所有任务\n\n\n  if (action.type === REMOVE_FINISHED_TODO_ITEM) {\n    var _newState4 = JSON.parse(JSON.stringify(state)); // 4.1 取出对象\n\n\n    var tempArr = [];\n\n    _newState4.todos.forEach(function (todo, index) {\n      if (!todo.finished) {\n        tempArr.push(todo);\n      }\n    }); // 4.2 返回最新的状态\n\n\n    _newState4.todos = tempArr;\n    _newState4.finishedCount = 0;\n    return _newState4;\n  } // 5. 全选和非全选\n\n\n  if (action.type === IS_CHECKED_ALL_TODO_ITEM) {\n    var _newState5 = JSON.parse(JSON.stringify(state)); // 5.1 遍历\n\n\n    var _finishedCount2 = 0;\n\n    _newState5.todos.forEach(function (todo, index) {\n      todo.finished = action.flag;\n    }); // 5.2 处理选中的\n\n\n    _newState5.todos.forEach(function (todo, index) {\n      if (todo.finished) {\n        _finishedCount2 += 1;\n      }\n    }); // 5.3 更新状态\n\n\n    _newState5.finishedCount = _finishedCount2;\n    return _newState5;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/cvter/Documents/react-demo/todolist-reduxsaga/src/store/reducer.js"],"names":["DEL_TODO_ITEM","CHANGE_TODO_ITEM","ADD_TODO_ITEM","REMOVE_FINISHED_TODO_ITEM","IS_CHECKED_ALL_TODO_ITEM","GET_ALL_ITEM","defaultState","todos","finishedCount","state","action","console","log","type","newState","JSON","parse","stringify","forEach","todo","index","id","todoId","splice","finished","isFinished","push","tempArr","flag"],"mappings":"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","sourcesContent":["import {\r\n    DEL_TODO_ITEM,\r\n    CHANGE_TODO_ITEM,\r\n    ADD_TODO_ITEM,\r\n    REMOVE_FINISHED_TODO_ITEM,\r\n    IS_CHECKED_ALL_TODO_ITEM,\r\n    GET_ALL_ITEM\r\n} from './actionTypes'\r\n\r\n// 默认的数据\r\nconst defaultState = {\r\n    todos: [\r\n        // {\r\n        //     id: 1,\r\n        //     title: '看一小时React的课程',\r\n        //     finished: false\r\n        // },\r\n        // {\r\n        //     id: 2,\r\n        //     title: '打一小时篮球',\r\n        //     finished: false\r\n        // },\r\n        // {\r\n        //     id: 3,\r\n        //     title: '游泳一小时',\r\n        //     finished: false\r\n        // },\r\n        // {\r\n        //     id: 4,\r\n        //     title: '看书一小时',\r\n        //     finished: false\r\n        // },\r\n    ],\r\n    finishedCount: 0\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n    console.log(state, action);\r\n    // 获取所有todos\r\n    if(action.type === GET_ALL_ITEM) {\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        newState.todos = action.todos;\r\n        return newState;\r\n    }\r\n    // 1. 删除一条Todo\r\n    if (action.type === DEL_TODO_ITEM) {\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        // 1.1 遍历\r\n        let finishedCount = 0;\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.id === action.todoId) {\r\n                newState.todos.splice(index, 1);\r\n            }\r\n        });\r\n        // 1.2 处理选中的\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.finished) {\r\n                finishedCount += 1;\r\n            }\r\n        });\r\n        // 1.3 更新状态\r\n        newState.finishedCount = finishedCount;\r\n        return newState;\r\n    }\r\n    // 2. 修改一条记录的状态\r\n    if (action.type === CHANGE_TODO_ITEM) {\r\n        // 1.1 遍历\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        let finishedCount = 0;\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.id === action.todoId) {\r\n                todo.finished = action.isFinished;\r\n            }\r\n            if (todo.finished) {\r\n                finishedCount += 1;\r\n            }\r\n        });\r\n\r\n        // 2.3 返回新的数据状态\r\n        newState.finishedCount = finishedCount;\r\n        return newState;\r\n    }\r\n    // 3. 添加一条记录\r\n    if (action.type === ADD_TODO_ITEM) {\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        newState.todos.push(action.todo);\r\n        return newState;\r\n    }\r\n    // 4. 删除已经完成的所有任务\r\n    if (action.type === REMOVE_FINISHED_TODO_ITEM) {\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        // 4.1 取出对象\r\n        let tempArr = [];\r\n        newState.todos.forEach((todo, index) => {\r\n            if (!todo.finished) {\r\n                tempArr.push(todo);\r\n            }\r\n        });\r\n        // 4.2 返回最新的状态\r\n        newState.todos = tempArr;\r\n        newState.finishedCount = 0;\r\n        return newState;\r\n    }\r\n    // 5. 全选和非全选\r\n    if (action.type === IS_CHECKED_ALL_TODO_ITEM) {\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        // 5.1 遍历\r\n        let finishedCount = 0;\r\n        newState.todos.forEach((todo, index) => {\r\n            todo.finished = action.flag;\r\n        });\r\n\r\n        // 5.2 处理选中的\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.finished) {\r\n                finishedCount += 1;\r\n            }\r\n        });\r\n\r\n        // 5.3 更新状态\r\n        newState.finishedCount = finishedCount;\r\n        return newState;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}