{"ast":null,"code":"import { DEL_TODO_ITEM, CHANGE_TODO_ITEM, ADD_TODO_ITEM, REMOVE_FINISHED_TODO_ITEM, IS_CHECKED_ALL_TODO_ITEM } from './actionTypes'; // 默认的数据\n\nconst defaultState = {\n  todos: [{\n    id: 1,\n    title: '看一小时React的课程',\n    finished: false\n  }, {\n    id: 2,\n    title: '打一小时篮球',\n    finished: false\n  }, {\n    id: 3,\n    title: '游泳一小时',\n    finished: false\n  }, {\n    id: 4,\n    title: '看书一小时',\n    finished: false\n  }],\n  finishedCount: 0\n};\nexport default ((state, action) => {\n  console.log(state, action); // 1. 删除一条Todo\n\n  if (action.type === DEL_TODO_ITEM) {\n    const newState = defaultState;\n    console.log('newState', newState); // 1.1 遍历\n\n    let finishedCount = 0;\n    newState.todos.forEach((todo, index) => {\n      if (todo.id === action.todoId) {\n        newState.todos.splice(index, 1);\n      }\n    }); // 1.2 处理选中的\n\n    newState.todos.forEach((todo, index) => {\n      if (todo.finished) {\n        finishedCount += 1;\n      }\n    }); // 1.3 更新状态\n\n    newState.finishedCount = finishedCount;\n    return newState;\n  } // 2. 修改一条记录的状态\n\n\n  if (action.type === CHANGE_TODO_ITEM) {\n    // 1.1 遍历\n    const newState = defaultState;\n    let finishedCount = 0;\n    newState.todos.forEach((todo, index) => {\n      if (todo.id === action.todoId) {\n        todo.finished = action.isFinished;\n      }\n\n      if (todo.finished) {\n        finishedCount += 1;\n      }\n    }); // 2.3 返回新的数据状态\n\n    newState.finishedCount = finishedCount;\n    return newState;\n  } // 3. 添加一条记录\n\n\n  if (action.type === ADD_TODO_ITEM) {\n    // const newState = defaultState;\n    const newState = defaultState;\n    newState.todos.push(action.todo);\n    return newState;\n  } // 4. 删除已经完成的所有任务\n\n\n  if (action.type === REMOVE_FINISHED_TODO_ITEM) {\n    const newState = defaultState; // 4.1 取出对象\n\n    let tempArr = [];\n    newState.todos.forEach((todo, index) => {\n      if (!todo.finished) {\n        tempArr.push(todo);\n      }\n    }); // 4.2 返回最新的状态\n\n    newState.todos = tempArr;\n    newState.finishedCount = 0;\n    return newState;\n  } // 5. 全选和非全选\n\n\n  if (action.type === IS_CHECKED_ALL_TODO_ITEM) {\n    const newState = defaultState; // 5.1 遍历\n\n    let finishedCount = 0;\n    newState.todos.forEach((todo, index) => {\n      todo.finished = action.flag;\n    }); // 5.2 处理选中的\n\n    newState.todos.forEach((todo, index) => {\n      if (todo.finished) {\n        finishedCount += 1;\n      }\n    }); // 5.3 更新状态\n\n    newState.finishedCount = finishedCount;\n    return newState;\n  }\n\n  return defaultState;\n});","map":{"version":3,"sources":["/Users/cvter/Documents/react-demo/todolist-hockredux/src/store/reducer.js"],"names":["DEL_TODO_ITEM","CHANGE_TODO_ITEM","ADD_TODO_ITEM","REMOVE_FINISHED_TODO_ITEM","IS_CHECKED_ALL_TODO_ITEM","defaultState","todos","id","title","finished","finishedCount","state","action","console","log","type","newState","forEach","todo","index","todoId","splice","isFinished","push","tempArr","flag"],"mappings":"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","sourcesContent":["import {\n    DEL_TODO_ITEM,\n    CHANGE_TODO_ITEM,\n    ADD_TODO_ITEM,\n    REMOVE_FINISHED_TODO_ITEM,\n    IS_CHECKED_ALL_TODO_ITEM\n} from './actionTypes'\n\n// 默认的数据\nconst defaultState = {\n    todos: [{\n            id: 1,\n            title: '看一小时React的课程',\n            finished: false\n        },\n        {\n            id: 2,\n            title: '打一小时篮球',\n            finished: false\n        },\n        {\n            id: 3,\n            title: '游泳一小时',\n            finished: false\n        },\n        {\n            id: 4,\n            title: '看书一小时',\n            finished: false\n        },\n    ],\n    finishedCount: 0\n};\n\nexport default (state, action) => {\n    console.log(state, action);\n    // 1. 删除一条Todo\n    if (action.type === DEL_TODO_ITEM) {\n        const newState = defaultState;\n        console.log('newState',newState)\n        // 1.1 遍历\n        let finishedCount = 0;\n        newState.todos.forEach((todo, index) => {\n            if (todo.id === action.todoId) {\n                newState.todos.splice(index, 1);\n            }\n        });\n        // 1.2 处理选中的\n        newState.todos.forEach((todo, index) => {\n            if (todo.finished) {\n                finishedCount += 1;\n            }\n        });\n        // 1.3 更新状态\n        newState.finishedCount = finishedCount;\n        return newState;\n    }\n    // 2. 修改一条记录的状态\n    if (action.type === CHANGE_TODO_ITEM) {\n        // 1.1 遍历\n        const newState = defaultState;\n        let finishedCount = 0;\n        newState.todos.forEach((todo, index) => {\n            if (todo.id === action.todoId) {\n                todo.finished = action.isFinished;\n            }\n            if (todo.finished) {\n                finishedCount += 1;\n            }\n        });\n\n        // 2.3 返回新的数据状态\n        newState.finishedCount = finishedCount;\n        return newState;\n    }\n    // 3. 添加一条记录\n    if (action.type === ADD_TODO_ITEM) {\n        // const newState = defaultState;\n        const newState = defaultState;\n        newState.todos.push(action.todo);\n        return newState;\n    }\n    // 4. 删除已经完成的所有任务\n    if (action.type === REMOVE_FINISHED_TODO_ITEM) {\n        const newState = defaultState;\n        // 4.1 取出对象\n        let tempArr = [];\n        newState.todos.forEach((todo, index) => {\n            if (!todo.finished) {\n                tempArr.push(todo);\n            }\n        });\n        // 4.2 返回最新的状态\n        newState.todos = tempArr;\n        newState.finishedCount = 0;\n        return newState;\n    }\n    // 5. 全选和非全选\n    if (action.type === IS_CHECKED_ALL_TODO_ITEM) {\n        const newState = defaultState;\n        // 5.1 遍历\n        let finishedCount = 0;\n        newState.todos.forEach((todo, index) => {\n            todo.finished = action.flag;\n        });\n\n        // 5.2 处理选中的\n        newState.todos.forEach((todo, index) => {\n            if (todo.finished) {\n                finishedCount += 1;\n            }\n        });\n\n        // 5.3 更新状态\n        newState.finishedCount = finishedCount;\n        return newState;\n    }\n    return defaultState;\n}"]},"metadata":{},"sourceType":"module"}