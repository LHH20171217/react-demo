{"ast":null,"code":"import { DEL_TODO_ITEM, CHANGE_TODO_ITEM, ADD_TODO_ITEM, REMOVE_FINISHED_TODO_ITEM, IS_CHECKED_ALL_TODO_ITEM } from './actionTypes'; // 默认的数据\n\nvar defaultState = {\n  todos: [{\n    id: 1,\n    title: '看一小时React的课程',\n    finished: false\n  }, {\n    id: 2,\n    title: '打一小时台球',\n    finished: false\n  }, {\n    id: 3,\n    title: '看一小时Java的课程',\n    finished: false\n  }, {\n    id: 4,\n    title: '看一小时Python的课程',\n    finished: false\n  }],\n  finishedCount: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(state, action); // 1. 删除一条Todo\n\n  if (action.type === DEL_TODO_ITEM) {\n    var newState = JSON.parse(JSON.stringify(state)); // 1.1 遍历\n\n    var finishedCount = 0;\n    newState.todos.forEach(function (todo, index) {\n      if (todo.id === action.todoId) {\n        newState.todos.splice(index, 1);\n      }\n    }); // 1.2 处理选中的\n\n    newState.todos.forEach(function (todo, index) {\n      if (todo.finished) {\n        finishedCount += 1;\n      }\n    }); // 1.3 更新状态\n\n    newState.finishedCount = finishedCount;\n    return newState;\n  } // 2. 修改一条记录的状态\n\n\n  if (action.type === CHANGE_TODO_ITEM) {\n    // 1.1 遍历\n    var _newState = JSON.parse(JSON.stringify(state));\n\n    var _finishedCount = 0;\n\n    _newState.todos.forEach(function (todo, index) {\n      if (todo.id === action.todoId) {\n        todo.finished = action.isFinished;\n      }\n\n      if (todo.finished) {\n        _finishedCount += 1;\n      }\n    }); // 2.3 返回新的数据状态\n\n\n    _newState.finishedCount = _finishedCount;\n    return _newState;\n  } // 3. 添加一条记录\n\n\n  if (action.type === ADD_TODO_ITEM) {\n    var _newState2 = JSON.parse(JSON.stringify(state));\n\n    _newState2.todos.push(action.todo);\n\n    return _newState2;\n  } // 4. 删除已经完成的所有任务\n\n\n  if (action.type === REMOVE_FINISHED_TODO_ITEM) {\n    var _newState3 = JSON.parse(JSON.stringify(state)); // 4.1 取出对象\n\n\n    var tempArr = [];\n\n    _newState3.todos.forEach(function (todo, index) {\n      if (!todo.finished) {\n        tempArr.push(todo);\n      }\n    }); // 4.2 返回最新的状态\n\n\n    _newState3.todos = tempArr;\n    _newState3.finishedCount = 0;\n    return _newState3;\n  } // 5. 全选和非全选\n\n\n  if (action.type === IS_CHECKED_ALL_TODO_ITEM) {\n    var _newState4 = JSON.parse(JSON.stringify(state)); // 5.1 遍历\n\n\n    var _finishedCount2 = 0;\n\n    _newState4.todos.forEach(function (todo, index) {\n      todo.finished = action.flag;\n    }); // 5.2 处理选中的\n\n\n    _newState4.todos.forEach(function (todo, index) {\n      if (todo.finished) {\n        _finishedCount2 += 1;\n      }\n    }); // 5.3 更新状态\n\n\n    _newState4.finishedCount = _finishedCount2;\n    return _newState4;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/cvter/Desktop/lk-todo-list/src/store/reducer.js"],"names":["DEL_TODO_ITEM","CHANGE_TODO_ITEM","ADD_TODO_ITEM","REMOVE_FINISHED_TODO_ITEM","IS_CHECKED_ALL_TODO_ITEM","defaultState","todos","id","title","finished","finishedCount","state","action","console","log","type","newState","JSON","parse","stringify","forEach","todo","index","todoId","splice","isFinished","push","tempArr","flag"],"mappings":"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","sourcesContent":["import {DEL_TODO_ITEM, CHANGE_TODO_ITEM, ADD_TODO_ITEM, REMOVE_FINISHED_TODO_ITEM, IS_CHECKED_ALL_TODO_ITEM} from './actionTypes'\r\n\r\n// 默认的数据\r\nconst defaultState = {\r\n    todos: [\r\n        {id: 1, title: '看一小时React的课程', finished: false},\r\n        {id: 2, title: '打一小时台球', finished: false},\r\n        {id: 3, title: '看一小时Java的课程', finished: false},\r\n        {id: 4, title: '看一小时Python的课程', finished: false},\r\n    ],\r\n    finishedCount: 0\r\n};\r\n\r\nexport default (state = defaultState, action)=>{\r\n    console.log(state, action);\r\n    // 1. 删除一条Todo\r\n    if(action.type === DEL_TODO_ITEM){\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        // 1.1 遍历\r\n        let finishedCount = 0;\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.id === action.todoId) {\r\n                newState.todos.splice(index, 1);\r\n            }\r\n        });\r\n        // 1.2 处理选中的\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.finished) {\r\n                finishedCount += 1;\r\n            }\r\n        });\r\n        // 1.3 更新状态\r\n        newState.finishedCount = finishedCount;\r\n        return newState;\r\n    }\r\n    // 2. 修改一条记录的状态\r\n    if(action.type === CHANGE_TODO_ITEM){\r\n        // 1.1 遍历\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        let finishedCount = 0;\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.id === action.todoId) {\r\n                todo.finished = action.isFinished;\r\n            }\r\n            if (todo.finished) {\r\n                finishedCount += 1;\r\n            }\r\n        });\r\n\r\n        // 2.3 返回新的数据状态\r\n        newState.finishedCount = finishedCount;\r\n        return newState;\r\n    }\r\n    // 3. 添加一条记录\r\n    if(action.type === ADD_TODO_ITEM){\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        newState.todos.push(action.todo);\r\n        return newState;\r\n    }\r\n    // 4. 删除已经完成的所有任务\r\n    if(action.type === REMOVE_FINISHED_TODO_ITEM){\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        // 4.1 取出对象\r\n        let tempArr = [];\r\n        newState.todos.forEach((todo, index) => {\r\n            if (!todo.finished) {\r\n                tempArr.push(todo);\r\n            }\r\n        });\r\n        // 4.2 返回最新的状态\r\n        newState.todos = tempArr;\r\n        newState.finishedCount = 0;\r\n        return newState;\r\n    }\r\n    // 5. 全选和非全选\r\n    if(action.type === IS_CHECKED_ALL_TODO_ITEM){\r\n        const newState = JSON.parse(JSON.stringify(state));\r\n        // 5.1 遍历\r\n        let finishedCount = 0;\r\n        newState.todos.forEach((todo, index) => {\r\n            todo.finished = action.flag;\r\n        });\r\n\r\n        // 5.2 处理选中的\r\n        newState.todos.forEach((todo, index) => {\r\n            if (todo.finished) {\r\n                finishedCount += 1;\r\n            }\r\n        });\r\n\r\n        // 5.3 更新状态\r\n        newState.finishedCount = finishedCount;\r\n        return newState;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}